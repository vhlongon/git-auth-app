type User {
  login: String!
  name: String
  id: Int!
  avatarUrl: String
  url: String!
  location: String
  email: String
  publicRepos: Int
  publicGists: Int
  followers: Int
  following: Int
  accessToken: String
}

enum Scope {
  user
  public_repo
}

type AuthPayloadWithUser {
  accessToken: String!
  user: User!
}

type AuthPayload {
  accessToken: String!
}

type LoginUrlPayload {
  url: String!
}

enum AuthorAssociation {
  OWNER
  COLLABORATOR
  CONTRIBUTOR
  MEMBER
  ORGANIZATION_MEMBER
  OTHER
  NONE
}

type Reactions {
  url: String!
  totalCount: Int!
  upVote: Int!
  downVote: Int!
  laugh: Int!
  hooray: Int!
  confused: Int!
  heart: Int!
  rocket: Int!
  eyes: Int!
}

type Comment {
  id: Int!
  body: String!
  createdAt: String!
  updatedAt: String!
  user: User!
  issueUrl: String!
  authorAssociation: AuthorAssociation!
  url: String!
  htmlUrl: String!
  reactions: Reactions
}

type Issue {
  url: String!
  commentsUrl: String!
  id: Int!
  number: Int!
  user: User
  repositoryUrl: String!
  htmlUrl: String!
  comments: [Comment!]
  title: String!
}

type Repo {
  createdAt: String!
  description: String
  forksCount: Int
  fullName: String!
  homepage: String
  htmlUrl: String!
  id: Int!
  language: String
  name: String!
  openIssuesCount: Int
  owner: User!
  pushedAt: String!
  size: Int
  stargazersCount: Int
  updatedAt: String!
  url: String!
  watchersCount: Int
  issuesUrl: String!
  issues: [Issue!]
}

type Query {
  githubLoginUrl(scope: [Scope!]): LoginUrlPayload!
  me: User
  repos(page: Int = 0, perPage: Int = 30): [Repo!]
  repo(name: String!): Repo
  comments(number: Int!, name: String!): [Comment!]
}

type Mutation {
  authorizeWithGithub(code: String!): AuthPayloadWithUser
  getGithubAccessToken(code: String!): AuthPayload
  createComment(body: String!, issueNumber: Int!, repoName: String!): Comment
  deleteComment(id: Int!, repoName: String!): Boolean
}
